{"version":3,"file":"component---src-pages-index-js-62186ef798404244ad29.js","mappings":"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","sources":["webpack://hankyeolk-dev-blog/./src/components/categoryAside.jsx","webpack://hankyeolk-dev-blog/./src/components/PostCard.jsx","webpack://hankyeolk-dev-blog/./src/components/PostCardList.jsx","webpack://hankyeolk-dev-blog/./src/pages/index.js"],"sourcesContent":["import React from 'react';\n\nconst CategoryAside = ({\n  categories,\n  setActiveCategory,\n  category,\n  postCategoryCount\n}) => {\n  const changeCurCategory = (e) => {\n    e.preventDefault();\n    setActiveCategory(e.currentTarget.id);\n  };\n\n  return (\n    <section className='categoryAside-container'>\n      <div className='flex flex-col w-full' id='category-header'>\n        <p className='text-sm sm:text-lg md:text-xl font-medium md:font-semibold'>\n          {category}\n        </p>\n        <hr className='w-full border-[#343a40] mt-3 md:mt-5' />\n      </div>\n      <div\n        className='w-full flex md:flex-col gap-x-2 gap-y-2 flex-wrap'\n        id='category-list'>\n        {categories.map((category, i) => (\n          <div\n            className='categoryAside-category'\n            id={category}\n            key={category}\n            onClick={changeCurCategory}>\n            <p>{category}</p>\n            <p>{postCategoryCount[categories.indexOf(category)]}</p>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default CategoryAside;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nconst PostCard = ({ id, postSlug, title, content, category, createdAt }) => {\n  return (\n    <div className='p-3 border-[#343a40] border postCard-hover'>\n      <Link className='flex flex-col cursor-pointer' to={`${postSlug}`}>\n        <div id='postcard-tag-container' className='postCard-tag-Container'>\n          {category.slice(0, 2).map((c, i) => (\n            <div key={i} className='postCard-category' id='post-tag'>\n              {c}\n            </div>\n          ))}\n          <p className=' text-[#343a40] text-[0.5rem] font-thin sm:text-xs sm:font-normal'>\n            {createdAt}\n          </p>\n        </div>\n        <p className='postCard-title filter-none'>{title}</p>\n        <p className='postCard-content-preview'>{content}</p>\n        <button className='flex flex-row-reverse'>\n          <p className='postCard-moreBtn'>Îçî ÏùΩÏñ¥Î≥¥Í∏∞ üëâ</p>\n        </button>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostCard;\n","import React, { useMemo } from 'react';\nimport PostCard from './PostCard';\n\nconst PostCardList = ({ posts, category }) => {\n  const filteredPosts = useMemo(() => {\n    if (category === 'Ï†ÑÏ≤¥') return posts;\n    return posts.filter((post) => post.category.includes(category));\n  }, [posts, category]);\n\n  return (\n    <section\n      id='postcard-list'\n      className='flex flex-col items-center gap-y-4 w-full'>\n      {filteredPosts.map((post) => (\n        <PostCard\n          key={post.id}\n          postSlug={post.postSlug}\n          id={post.id}\n          title={post.title}\n          content={post.content}\n          category={post.category}\n          createdAt={post.createdAt}\n        />\n      ))}\n    </section>\n  );\n};\n\nexport default PostCardList;\n","import { graphql } from 'gatsby';\nimport React, { useCallback, useState } from 'react';\nimport CategoryAside from '../components/categoryAside';\nimport PostCardList from '../components/PostCardList';\nimport Seo from '../components/Seo';\nimport Layout from '../layout';\nimport '../styles/global.css';\n\nconst IndexPage = ({ data }) => {\n  const categories = ['Ï†ÑÏ≤¥', ...data.site.siteMetadata.postBasisCategories];\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => ({\n    id: node.id,\n    postSlug: node.fields.postSlug,\n    title: node.frontmatter.title,\n    createdAt: node.frontmatter.createdAt,\n    content: node.excerpt,\n    category: node.frontmatter.categories.split(' ')\n  }));\n\n  const postCategoryCount = [\n    posts.length,\n    ...categories.slice(1).map((el) => 0)\n  ];\n  posts.forEach((post) => {\n    categories.forEach((category) => {\n      if (post.category.includes(category)) {\n        postCategoryCount[categories.indexOf(category)] += 1;\n      }\n    });\n  });\n\n  const [curCategory, setCurCategory] = useState(categories[0]);\n  const setActiveCategory = useCallback((value) => {\n    setCurCategory(value);\n  }, []);\n\n  return (\n    <Layout>\n      <Seo\n        title={`ÌïúÍ≤∞ Î∏îÎ°úÍ∑∏ | ${curCategory}`}\n        description={`PM Í∞ïÌïúÍ≤∞Ïùò Î∏îÎ°úÍ∑∏ÏûÖÎãàÎã§.`}\n      />\n      <main className='w-full px-3 flex md:flex-row md:gap-x-4 md:gap-y-0 justify-between sm:min-h-[950px]'>\n        <section className='md:basis-2/3'>\n          <PostCardList posts={posts} category={curCategory} />\n        </section>\n        <section className='md:basis-1/3 hidden md:block'>\n          <CategoryAside\n            id='category-aside'\n            categories={categories}\n            setActiveCategory={setActiveCategory}\n            category={curCategory}\n            postCategoryCount={postCategoryCount}\n          />\n        </section>\n      </main>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const siteQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        postBasisCategories\n      }\n    }\n\n    allMarkdownRemark(\n      filter: { fields: { postSlug: { ne: null } } }\n      sort: { frontmatter: { createdAt: DESC } }\n    ) {\n      edges {\n        node {\n          fields {\n            postSlug\n          }\n          id\n          excerpt(pruneLength: 300, truncate: true)\n          frontmatter {\n            createdAt\n            title\n            categories\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["categories","setActiveCategory","category","postCategoryCount","changeCurCategory","e","preventDefault","currentTarget","id","className","map","i","key","onClick","indexOf","postSlug","title","content","createdAt","Link","to","slice","c","posts","filteredPosts","useMemo","filter","post","includes","data","site","siteMetadata","postBasisCategories","allMarkdownRemark","edges","node","fields","frontmatter","excerpt","split","length","el","forEach","curCategory","setCurCategory","useState","useCallback","value","Seo","description"],"sourceRoot":""}