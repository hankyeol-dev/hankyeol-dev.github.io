{"componentChunkName":"component---src-templates-post-template-js","path":"/2021-08-08/","result":{"data":{"curPost":{"id":"03524f30-e23e-5cad-a1a9-b4e55adc732b","html":"<h1>Create-React-App 없이 리액트 프로젝트 환경 구축하기</h1>\n<h3 id=\"직접-환경을-구축해보는-것에-대해서\">직접 환경을 구축해보는 것에 대해서</h3>\n<p>CRA는 분명히 빠른 리액트 프로젝트를 시작하게 만들어주는 좋은 도구임에는 틀림없다. CRA를 통해서 프로젝트 자체를 빌드 할 수 있다. CRA가 나쁘다는 이야기를 하려고 이 글을 적는 것이 아님을 시작에 강조한다. <br /></p>\n<p>그럼에도 내가 이 기록을 남기는 이유는 너무 맹목적인 CRA를 남발하지 않기 위함이다. 웹팩으로 프로젝트를 구축해보면서 어떤 플러그인, 로더를 적소에 적용해야 하는지 배우기 위함이다. 바벨을 통해서 어떻게 언어의 문법간 호환성을 지켜야 하는지를 공부하기 위함이다. <br /></p>\n<p>그래도 나는 여전히 CRA가 너무 편하고 좋다. 필요하다면 CRA를 적극적으로 쓰는 것도 좋은 것 같다.</p>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<h3 id=\"시작은-필요한-모듈-설치로부터\">시작은 필요한 모듈 설치로부터</h3>\n<p>나는 yarn으로 노드 모듈을 설치하는 것을 좋아한다. 조금 더 빠르다는 느낌도 있고, 터미널에서 모듈을 받았을때 나오는 문구도 조금 더 세련된 것 같아서 그렇다. 그래서 기록의 대부분은 <code>yarn add</code>로 구성될 것 같다. <br /></p>\n<p>우선, 프로젝트를 시작할 폴더를 하나 만들고 <code>yarn init -y</code>로 노드 프로젝트임을 드러낸다. 그리고 리액트와 관련된 모듈을 설치한다. <code>yarn add react react-dom</code> react-dom은 react와 dom을 직접적으로 연결해주는 모듈이다.</p>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<blockquote>\n<p>Babel <br /></p>\n</blockquote>\n<p>그 다음, 자바스크립트의 서로다른 문법간의 오류를 하나로 통합해줄 바벨의 모듈들을 설치한다. JSX와 ES6 이상의 문법을 다른 브라우저가 이해할 수 있도록 ES5 문법으로 변환해준다. <code>yarn add @babel/core @babel/preset-react @babel/preset-env</code> <br /></p>\n<p>바벨의 모듈은 앞에 '@' 마크가 붙는 특징이 있다. 바벨에 대한 자세한 설명은 이전 TIL에 개발환경 구축의 내용을 정리한 것이 있다. 그 부분을 함께 참고하자. <a href=\"https://github.com/hankyeolk/TIL/blob/main/Dev_Env/babel.md\">개발환경 이해하기 - Babel</a></p>\n<ul>\n<li>@babel/preset-react : 리액트의 JSX 문법을 자바스크립트 코드로 변환해준다.</li>\n<li>@babel/preset-env : ES6 이상의 자바스크립트 문법을 다른 브라우져에서도 호환 가능하도록 ES5로 변환해주는 프리셋이다.</li>\n</ul>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<blockquote>\n<p>Webpack and Loader <br /></p>\n</blockquote>\n<p>프로젝트 환경 구축의 핵심인 웹팩과 관련 모듈을 설치한다. <br />\n<code>yarn add -D webpack webpack-cli webpack-dev-server babel-loader css-loader style-loader</code> <br /></p>\n<ul>\n<li><code>webpack-dev-server</code> : 이름에서도 알 수 있듯이 개발 모드에 필요한 서버를 구동해준다. 컴퓨터의 메모리를 빌려 웹팩을 구동하고 임0시 서버를 띄우는 역할을 한다.</li>\n<li><code>css-loader, style-loader</code> : css 문법을 자바스크립트로 변환해주는 역할을 한다. / css-loader가 변환한 파일을 index.html의 <code>&#x3C;style></code> 태그에 넣는 역할을 한다.</li>\n</ul>\n<p>그 다음, 번들링 파일에 적용할 플러그인을 설치한다. <br />\n<code>yarn add -D html-webpack-plugin clean-webpack-plugin</code> <br /></p>\n<ul>\n<li><code>html-webpack-plugin</code>: html파일에 번들링된 리액트 코드를 삽입해준다. 그리고 dist 폴더에 번들링된 파일을 옮겨주는 역할을 한다.</li>\n<li><code>clean-webpack-plugin</code> : 번들링이 완료될 때마다 이전의 번들링 결과를 제거해주는 역할을 한다.</li>\n</ul>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<h3 id=\"이제-바벨-웹팩-설정-파일을-만들면서-프로젝트-환경을-완성해보자\">이제 바벨, 웹팩 설정 파일을 만들면서 프로젝트 환경을 완성해보자.</h3>\n<blockquote>\n<p>babel.config.js <br /></p>\n</blockquote>\n<p>바벨 설정 파일에는 프리셋을 잘 적용해주는 것이 중요하다. 프리셋은 바벨의 역할들을 모아둔 도구 상자라고 생각하면 편하다. <code>.babelrc</code> 이름으로 파일 이름을 지을 수도 있다. 이렇게 사용할 프리셋을 <code>presets</code> 항목에 배열로 넣어주면된다.<br /></p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">// babel.config.js\nmodule.exports = {\n  presets: [&#39;@babel/preset-env&#39;, &#39;@babel/preset-react&#39;]\n};</code>\n        </deckgo-highlight-code>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<blockquote>\n<p>webpack.config.js <br /></p>\n</blockquote>\n<p>가장 중요한 설정은 웹팩 설정이다. 실질적으로 웹팩으로 어떻게 번들링을 하는지에 따라서 프로젝트의 결과가 완전히 달라질 수 있다. <code>webpack.config.js</code>파일을 구축하면서 꼼꼼하게 알아보자.<br /></p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">// webpack.config.js\nconst webpack = require(&#39;webpack&#39;);\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\nconst { CleanWebpackPlugin } = require(&#39;clean-webpack-plugin&#39;);\nconst dotenv = require(&#39;dotenv&#39;).config();</code>\n        </deckgo-highlight-code>\n<p>설정에서 사용하는 개발 모드/프로덕션 모드를 구분하고 개발 서버의 포트 변호를 환경변수로 관리하기 위해서 dotenv를 설치해서 사용했다.</p>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 48px\" > </p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">module.exports = {\n  mode: process.env.mode,\n  entry: &#39;./src/index.js&#39;,\n  output: {\n    path: __dirname + &#39;/dist&#39;,\n    filename: &#39;bundle.[hash].js&#39;,\n    publicPath: &#39;/&#39;\n  },\n  resolve: {\n    // path.resove 형태로 사용할 수도 있다.\n    // 그러면 node의 기본 모듈 &#39;path&#39;를 불러와야 한다.\n    extensions: [&#39;.js&#39;, &#39;.jsx&#39;]\n  }\n};</code>\n        </deckgo-highlight-code>\n<p>번들링이 시작될 곳은 리액트 프로젝트에서 보통 리액트 돔에 랜더링을 거는 <code>index.js</code>로 정했다. 엔트리 포인트는 개발자가 알아서 정해주면 된다. 번들링 결과는 보통 dist 폴더에 해쉬가 된채로 저장된다. 번들링을 할 파일은 '.js, .jsx'의 확장자를 가진 파일이다. 나는 보통 자바스크립트로 리액트 프로젝트를 할 경우 컴포넌트 파일명을 '.jsx' 확장자로 짓는다. <br /></p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">module.exports = {\n  ...,\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: &#39;/node_modules/&#39;,\n        loader: &#39;babel-loader&#39;\n      },\n      {\n        test: /\\.css$/,\n        use: [{ loader: &#39;style-loader&#39; }, { loader: &#39;css-loader&#39; }]\n      }\n    ]\n  },\n}</code>\n        </deckgo-highlight-code>\n<p>로더는 rules 항목에서 지정해줄 수 있다. 중점적으로 신경써야 하는 것은 로더의 순서다. 웹팩은 등록한 로더의 배열에서 뒤의 요소부터 번들링에 반영한다. css를 자바스크립트로 변환한 다음 style 태그에 넣어주어야 하기 때문에 위의 순서를 가진다. 또한 node_modules 폴더의 모든 모듈들을 다 번들링 할 필요 없기 때문에 이걸 제외해주는 것도 중요하다.<br /></p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">module.exports = {\n  ...,\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      template: &#39;public/index.html&#39;\n    }),\n    new webpack.DefinePlugin({\n      mode: process.env.mode,\n      port: process.env.port\n    })\n  ],\n  devServer: {\n    host: &#39;localhost&#39;,\n    port: process.env.port,\n    open: true,\n    historyApiFallback: true,\n    hot: true\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>플러그인은 각 생성자 함수로 인스턴스를 만들어주는 방식으로 적용한다. <code>DefinePlugin</code>의 경우 웹팩의 기본 플러그인이라서 webpack으로 부터 가지고 왔다. <code>.env</code> 파일에 등록한 개발 모드와 포트 넘버를 등록해서 사용할 수 있게 해준다. <br /></p>\n<p><code>devServer</code>는 개발 서버를 열어주는 용도다. 'hot' 키워드를 true 값으로 설정해서 변화가 발생하면 바로 번들링이 발동되고 서버에 반영될 수 있도록 설정해주면 우리가 react 프로젝트에서 늘 봤던 'yarn start'를 만들어준다. 물론 스크립트에 등록을 해야한다. <br /></p>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 48px\" > </p>\n<h3 id=\"packagejson-파일에-스크립트-등록하고-리액트-개발-시작하기\">package.json 파일에 스크립트 등록하고 리액트 개발 시작하기</h3>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;webpack serve --progress --mode development&quot;,\n  &quot;build&quot;: &quot;webpack&quot;\n}</code>\n        </deckgo-highlight-code>\n<p>\"start\" 명령어에 'webpack-dev-server'를 등록해서 리액트 스크립트가 동작할 수 있도록 설정한다. 'hot' 키워드가 등록되어 있기때문에 프로젝트는 리액트의 사소한 변화를 반영할 수 있다. \"build\" 명령어를 동작하면 dist 폴더에 번들링된 파일들이 생성될 것이다. <br /></p>\n<p>이제 우리에게 남은 것은 <code>public/index.html</code>을 생성하고 <code>src/index.js</code>에 가벼운 리액트 코드를 작성하는 것이다. 물론 <code>yarn start</code> 명령어로 웹팩을 돌리고 3000번 포트(.env에 설정해준)에서 결과를 확인하는 것은 덤이다. <br /></p>\n<deckgo-highlight-code language=\"html\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">&lt;!-- public/index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=divice-width, initial-scale=1.0&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;\n    &lt;title&gt;react-twittler&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<p style=\"display: block; margin-top: 0px; margin-bottom: 32px\" > </p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">// index.js\nimport React from &#39;react&#39;;\nimport ReactDom from &#39;react-dom&#39;;\n\nconst App = () =&gt; {\n  return &lt;div&gt;hello hankyeol&lt;/div&gt;;\n};\n\nReactDom.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;));</code>\n        </deckgo-highlight-code>\n<br />\n<iframe src=\"https://www.youtube.com/embed/wSzh8iSdYUQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<blockquote>\n<p>부끄럽지만.. 회사에서 해당 내용으로 기술 발표 영상을 찍었다.</p>\n</blockquote>\n<br />","excerpt":"Create-React-App 없이 리액트 프로젝트 환경 구축하기 직접 환경을 구축해보는 것에 대해서 CRA는 분명히 빠른 리액트 프로젝트를 시작하게 만들어주는 좋은 도구임에는 틀림없다. CRA를 통해서 프로젝트 자체를 빌드 할 수 있다. CRA가 나쁘다는 이야기를 하려고 이 글을 적는 것이 아님을 시작에 강조한다.  그럼에도 내가 이 기록을 남기는 이유…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#create-react-app-%EC%97%86%EC%9D%B4-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\">Create-React-App 없이 리액트 프로젝트 환경 구축하기</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%A7%81%EC%A0%91-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%B4%EB%B3%B4%EB%8A%94-%EA%B2%83%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\">직접 환경을 구축해보는 것에 대해서</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%EC%9D%80-%ED%95%84%EC%9A%94%ED%95%9C-%EB%AA%A8%EB%93%88-%EC%84%A4%EC%B9%98%EB%A1%9C%EB%B6%80%ED%84%B0\">시작은 필요한 모듈 설치로부터</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A0%9C-%EB%B0%94%EB%B2%A8-%EC%9B%B9%ED%8C%A9-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%A9%B4%EC%84%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD%EC%9D%84-%EC%99%84%EC%84%B1%ED%95%B4%EB%B3%B4%EC%9E%90\">이제 바벨, 웹팩 설정 파일을 만들면서 프로젝트 환경을 완성해보자.</a></li>\n<li><a href=\"#packagejson-%ED%8C%8C%EC%9D%BC%EC%97%90-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B3%A0-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">package.json 파일에 스크립트 등록하고 리액트 개발 시작하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"createdAt":"2021-08-08","title":"Create-React-App 없이 리액트 프로젝트 보일러 플레이트 세팅하기","categories":"개발 React","emoji":"👨‍💻","titleImg":null},"fields":{"postSlug":"/2021-08-08/"}},"curPostToc":{"tableOfContents":{"items":[{"url":"#create-react-app-없이-리액트-프로젝트-환경-구축하기","title":"Create-React-App 없이 리액트 프로젝트 환경 구축하기","items":[{"items":[{"url":"#직접-환경을-구축해보는-것에-대해서","title":"직접 환경을 구축해보는 것에 대해서"},{"url":"#시작은-필요한-모듈-설치로부터","title":"시작은 필요한 모듈 설치로부터"},{"url":"#이제-바벨-웹팩-설정-파일을-만들면서-프로젝트-환경을-완성해보자","title":"이제 바벨, 웹팩 설정 파일을 만들면서 프로젝트 환경을 완성해보자."},{"url":"#packagejson-파일에-스크립트-등록하고-리액트-개발-시작하기","title":"package.json 파일에 스크립트 등록하고 리액트 개발 시작하기"}]}]}]}},"nextPost":{"frontmatter":{"title":"JavaScript 프로토타입","createdAt":"2021-06-30","categories":"개발 JavaScript","emoji":"👨‍💻"},"fields":{"postSlug":"/2021-06-30/"}},"prevPost":{"frontmatter":{"title":"SSH로 GitHub 연결하기","createdAt":"2021-08-15","categories":"블로그 인사이트","emoji":"👨‍💻"},"fields":{"postSlug":"/2021-08-15/"}},"site":{"siteMetadata":{"title":"hankyeolk-dev-blog","postBasisCategories":["블로그","책","개발","프로덕트","UX","브랜드","인사이트","노션","기타"]}}},"pageContext":{"postSlug":"/2021-08-08/","nextSlug":"/2021-06-30/","prevSlug":"/2021-08-15/"}},"staticQueryHashes":["968848749"],"slicesMap":{}}